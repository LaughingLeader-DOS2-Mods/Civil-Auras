Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
DB_CA_Aura_AuraStatus(0, "Luck", "CA_LUCKY_AURA", "CA_LUCKY", "CA_LUCKBONUS");
DB_CA_Aura_AuraStatus(1, "Sneaking", "CA_STEALTH_AURA", "CA_STEALTHY", "CA_SNEAKBONUS");
DB_CA_Aura_AuraStatus(2, "Persuasion", "CA_PERSUASION_AURA", "CA_PERSUASION", "CA_PERSUASIONBONUS");
DB_CA_Aura_AuraStatus(3, "Persuasion", "", "CA_MOTIVATED", "CA_PERSUASIONBONUS");
DB_CA_Aura_AuraStatus(4, "Barter", "", "", "CA_BARTERBONUS");

//DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, _StackNumber)
//DB_CA_Aura_LastBonus(_AuraHost, _TargetPlayer, _Stat, _TargetBonus, _StackAmount)
//DB_CA_Aura_RefreshTimers(_TimerName, _Player)
//DB_CA_Aura_RefreshAuraTimers(_TimerName, _Player, _Stat)
//DB_CA_Aura_LastHostAbility(_Player, _Stat, _LastAmount)
KBSECTION
//REGION CLEAR
QRY
CA_QRY_Aura_ClearBonus((CHARACTERGUID)_Player, (STRING)_Status)
AND
HasActiveStatus(_Player, _Status, 0)
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_ClearBonus((CHARACTERGUID)_Player, (STRING)_Status)
AND
HasActiveStatus(_Player, _Status, 1)
THEN
RemoveStatus(_Player, _Status);

PROC
CA_Aura_ClearBonus((CHARACTERGUID)_Player, (STRING)_Status)
AND
HasActiveStatus(_Player, _Status, 1)
THEN
RemoveStatus(_Player, _Status);

PROC
CA_Aura_ClearPreviouStackAmount((CHARACTERGUID)_Player, (STRING)_Status)
AND
DB_CA_Aura_StackAmount(_Player, _Status, _StackAmount)
THEN
NOT DB_CA_Aura_StackAmount(_Player, _Status, _StackAmount);

PROC
CA_Aura_ClearRecordedBonus((CHARACTERGUID)_Player, (STRING)_Stat)
AND
DB_CA_Aura_LastBonus(_AuraHost, _Player, _Stat, _TargetBonus, _StackAmount)
THEN
NOT DB_CA_Aura_LastBonus(_AuraHost, _Player, _Stat, _TargetBonus, _StackAmount);

//END_REGION

//REGION BONUS
PROC
CA_Aura_RecordBonus((CHARACTERGUID)_AuraHost, (CHARACTERGUID)_TargetPlayer, (STRING)_Stat, (INTEGER)_TargetBonus, (INTEGER)_StackAmount)
THEN
CA_Aura_ClearRecordedBonus(_TargetPlayer, _Stat);
DB_CA_Aura_LastBonus(_AuraHost, _TargetPlayer, _Stat, _TargetBonus, _StackAmount);

PROC
CA_Aura_DetermineBonus((CHARACTERGUID)_AuraHost, (CHARACTERGUID)_TargetPlayer, (STRING)_Stat, (STRING)_Status)
AND
CharacterGetAbility(_AuraHost, _Stat, _MaxVal)
AND
CharacterGetAbility(_TargetPlayer, _Stat, _CurVal)
AND
_CurVal < _MaxVal
AND
IntegerSubtract(_MaxVal, _CurVal, _BonusVal)
AND
_BonusVal > 0
THEN
CA_Aura_ClearPreviouStackAmount(_TargetPlayer, _Status);
DB_CA_Aura_StackAmount(_TargetPlayer, _Status, _BonusVal);
CA_Aura_RecordBonus(_AuraHost, _TargetPlayer, _Stat, _MaxVal, _BonusVal);

//END_REGION

//REGION APPLYING
PROC
CA_Aura_ApplyBonus((CHARACTERGUID)_Player, (STRING)_Status)
AND
NOT DB_CA_Aura_ApplyTimers(_, _Player, _Status, _)
AND
GetUUID(_Player, _PlayerID)
AND
CharacterGetDisplayName(_Player, _Handle, _Ref)
AND
StringConcatenate(_Ref, "_", _PName1)
AND
StringConcatenate(_PName1, _PlayerID, _PName)
AND
StringConcatenate("CA_Timers_ApplyAura_", _PName, _TimerName)
THEN
DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, 1);
TimerLaunch(_TimerName, 1);

PROC
CA_Aura_ProcessTimer((STRING)_TimerName)
AND
DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, _StackNumber)
AND
DB_CA_Aura_StackAmount(_Player, _Status, _MaxStacks)
AND
_StackNumber > _MaxStacks
THEN
NOT DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, _StackNumber);

PROC
CA_Aura_ProcessTimer((STRING)_TimerName)
AND
DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, _StackNumber)
AND
DB_CA_Aura_StackAmount(_Player, _Status, _MaxStacks)
AND
_StackNumber <= _MaxStacks
AND
IntegerSum(_StackNumber, 1, _NewStackNum)
THEN
NOT DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, _StackNumber);
DB_CA_Aura_ApplyTimers(_TimerName, _Player, _Status, _NewStackNum);
ApplyStatus(_Player, _Status, -1.0, 1);
TimerLaunch(_TimerName, 1);

IF
TimerFinished(_TimerName)
AND
DB_CA_Aura_ApplyTimers(_TimerName,_,_,_)
THEN
CA_Aura_ProcessTimer(_TimerName);

PROC
CA_Aura_ApplyAuraBonus((CHARACTERGUID)_AuraHost, (CHARACTERGUID)_TargetPlayer, (STRING)_Stat)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
THEN
CA_Aura_ClearBonus(_TargetPlayer, _BonusStatus);
CA_Aura_DetermineBonus(_AuraHost, _TargetPlayer, _Stat, _BonusStatus);
CA_Aura_ApplyBonus(_TargetPlayer, _BonusStatus);

PROC
CA_Aura_RemoveAuraBonus((CHARACTERGUID)_Player, (STRING)_Stat)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
THEN
CA_Aura_ClearBonus(_Player, _BonusStatus);
CA_Aura_ClearRecordedBonus(_Player, _Stat);
CA_Aura_ClearPreviouStackAmount(_Player, _BonusStatus);

//END_REGION

//REGION AURA_CHECKING
QRY
CA_QRY_Aura_AuraActive((CHARACTERGUID)_Player)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _HostStatus, 1)
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_AuraApplied((CHARACTERGUID)_Player)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _AuraStatus, 1)
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_BonusActive((CHARACTERGUID)_Player)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _BonusStatus, 1)
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_AffectedByAura((CHARACTERGUID)_Player)
AND
CA_QRY_Aura_AuraActive(_Player)
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_AffectedByAura((CHARACTERGUID)_Player)
AND
CA_QRY_Aura_AuraApplied(_Player)
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_AffectedByAura((CHARACTERGUID)_Player)
AND
CA_QRY_Aura_BonusActive(_Player)
THEN
DB_NOOP(1);
//END_REGION

//REGION REFRESHING
QRY
CA_QRY_Aura_BonusExceeded((CHARACTERGUID)_Player, (STRING)_Stat, (INTEGER)_Bonus)
AND
CharacterGetAbility(_Player, _Stat, _CurrentBonus)
AND
_CurrentBonus != _Bonus
THEN
DB_NOOP(1);

QRY
CA_QRY_Aura_BonusExceeded((CHARACTERGUID)_Player, (STRING)_Stat, (INTEGER)_Bonus)
AND
CharacterGetAbility(_Player, _Stat, _CurrentBonus)
AND
_CurrentBonus <= 0
THEN
DB_NOOP(1);

PROC
CA_Aura_SetRefreshTimer((CHARACTERGUID)_Player, (STRING)_Stat, (INTEGER)_Delay)
AND
DB_CA_Aura_RefreshAuraTimers(_TimerName, _Player, _Stat)
THEN
TimerCancel(_TimerName);
TimerLaunch(_TimerName, _Delay);

PROC
CA_Aura_SetRefreshTimer((CHARACTERGUID)_Player, (STRING)_Stat, (INTEGER)_Delay)
AND
NOT DB_CA_Aura_RefreshAuraTimers(_, _Player, _Stat)
AND
GetUUID(_Player, _PlayerID)
AND
CharacterGetDisplayName(_Player, _Handle, _Ref)
AND
StringConcatenate(_Ref, "_", _PName1)
AND
StringConcatenate(_PName1, _PlayerID, _PName)
AND
StringConcatenate("CA_Timers_RefreshAura_", _PName, _TimerName1)
AND
StringConcatenate(_TimerName1, "_", _TimerName2)
AND
StringConcatenate(_TimerName2, _Stat, _TimerName)
THEN
DB_CA_Aura_RefreshAuraTimers(_TimerName, _Player, _Stat);
TimerLaunch(_TimerName, _Delay);

PROC
CA_Aura_StoreCurrentAbilityValue((CHARACTERGUID)_Player, (STRING)_Stat)
AND
DB_CA_Aura_LastHostAbility(_Player, _Stat, _LastAmount)
AND
CharacterGetAbility(_Player, _Stat, _CurVal)
THEN
NOT DB_CA_Aura_LastHostAbility(_Player, _Stat, _LastAmount);
DB_CA_Aura_LastHostAbility(_Player, _Stat, _CurVal);

PROC
CA_Aura_StoreCurrentAbilityValue((CHARACTERGUID)_Player, (STRING)_Stat)
AND
NOT DB_CA_Aura_LastHostAbility(_Player, _Stat,_)
AND
CharacterGetAbility(_Player, _Stat, _CurVal)
THEN
DB_CA_Aura_LastHostAbility(_Player, _Stat, _CurVal);

PROC
CA_Aura_RefreshBonus((CHARACTERGUID)_Player, (STRING)_Stat)
AND
DB_CA_Aura_LastBonus(_AuraHost, _TargetPlayer, _Stat, _TargetBonus, _StackAmount)
//AND
//CA_QRY_Aura_BonusExceeded(_Player, _Stat, _TargetBonus)
THEN
CA_Aura_ApplyAuraBonus(_AuraHost, _TargetPlayer, _Stat);

PROC
CA_Aura_RefreshAura((CHARACTERGUID)_Player)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _AuraStatus, 1)
THEN
CA_Aura_RefreshBonus(_Player, _Stat);

PROC
CA_Aura_RefreshAura((CHARACTERGUID)_Player)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _HostStatus, 1)
AND
DB_CA_Aura_LastHostAbility(_Player, _Stat, _LastAmount)
AND
CharacterGetAbility(_Player, _Stat, _CurVal)
AND
_CurVal != _LastAmount
THEN
CA_Aura_StoreCurrentAbilityValue(_Player, _Stat);
CA_Aura_SetRefreshTimer(_Player, _Stat, 2500);

PROC
CA_Aura_RefreshSpecificAura((CHARACTERGUID)_Player, (STRING)_Stat)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _BonusStatus, 1)
AND
DB_CA_Aura_LastBonus(_AuraHost, _TargetPlayer, _Stat, _TargetBonus, _StackAmount)
THEN
CA_Aura_ApplyAuraBonus(_AuraHost, _TargetPlayer, _Stat);

PROC
CA_Aura_RefreshSpecificAura((CHARACTERGUID)_Player, (STRING)_Stat)
AND
DB_CA_Aura_AuraStatus(_Index, _Stat, _HostStatus, _AuraStatus, _BonusStatus)
AND
HasActiveStatus(_Player, _HostStatus, 1)
THEN
RemoveStatus(_Player, _HostStatus);
ApplyStatus(_Player, _HostStatus, -1.0, 1);
CharacterStatusText(_Player, "Aura Refreshed");

PROC
CA_Aura_RefreshPlayers()
AND
DB_IsPlayer(_Player)
THEN
CA_Aura_RefreshAura(_Player);

PROC
CA_Aura_RefreshAfterDelay((CHARACTERGUID)_Player, (INTEGER)_Delay)
AND
CA_QRY_Aura_AffectedByAura(_Player)
AND
NOT DB_CA_Aura_RefreshTimers(_, _Player)
AND
GetUUID(_Player, _PlayerID)
AND
CharacterGetDisplayName(_Player, _Handle, _Ref)
AND
StringConcatenate(_Ref, "_", _PName1)
AND
StringConcatenate(_PName1, _PlayerID, _PName)
AND
StringConcatenate("CA_Timers_RefreshAura_", _PName, _TimerName)
THEN
DB_CA_Aura_RefreshTimers(_TimerName, _Player);
TimerLaunch(_TimerName, _Delay);

IF
ItemEquipped(_Item, _Player)
THEN
CA_Aura_RefreshAura(_Player);

IF
ItemUnEquipped(_Item, _Player)
THEN
CA_Aura_RefreshAura(_Player);

IF
CharacterCreationFinished(_Player)
THEN
CA_Aura_RefreshAfterDelay(_Player, 1000);

IF
CharacterLeveledUp(_Player)
THEN
CA_Aura_RefreshAfterDelay(_Player, 10000);

IF
TimerFinished(_TimerName)
AND
DB_CA_Aura_RefreshTimers(_TimerName, _Player)
THEN
NOT DB_CA_Aura_RefreshTimers(_TimerName, _Player);
CA_Aura_RefreshAura(_Player);
TimerCancel(_TimerName);

IF
TimerFinished(_TimerName)
AND
DB_CA_Aura_RefreshAuraTimers(_TimerName, _Player, _Stat)
THEN
NOT DB_CA_Aura_RefreshAuraTimers(_TimerName, _Player, _Stat);
CA_Aura_RefreshSpecificAura(_Player, _Stat);
TimerCancel(_TimerName);

//END_REGION

//REGION LEGACY_REMOVAL
PROC
CA_Legacy_RemoveOldBonus((CHARACTERGUID)_Player, (STRING)_Stat, (INTEGER)_RemoveAmount)
AND
CharacterGetAbility(_Player, _Stat, _Val)
AND
_Val > 0
THEN
CharacterRemoveAbility(_Player, _Stat, _RemoveAmount);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "ZZZ_CivilAuras"
