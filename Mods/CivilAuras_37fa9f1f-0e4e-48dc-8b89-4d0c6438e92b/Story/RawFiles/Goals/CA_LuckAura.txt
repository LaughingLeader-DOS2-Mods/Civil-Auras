Version 1
SubGoalCombiner SGC_AND
INITSECTION
//DB_CA_LuckBonus((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000, 0);
//DB_CA_LuckAuraActive((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000, 0);
//DB_CA_Temp_CheckPlayer((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000);
//DB_CA_AuraHostLuck(_Player, _HostLuck);
//DB_CA_LuckRefreshTimer(_Player, _TimerName);
//DB_CA_LuckRefreshCompleteTimer(_Player, _TimerName);

//Proc Cheat Sheet
//CA_ClearLuckActive
//CA_ClearLuckBonus
KBSECTION
//REGION DEBUG
/*
IF
CharacterStatusApplied(S_Player_Beast_f25ca124-a4d2-427b-af62-df66df41a978, "CA_LUCKY", (CHARACTERGUID)_AuraHost)
AND
CharacterGetAbility(S_Player_Beast_f25ca124-a4d2-427b-af62-df66df41a978, "Luck", _PlayerLuck)
AND
CharacterGetAbility(_AuraHost, "Luck", _TargetLuck)
AND
IntegerSubtract(_TargetLuck, _PlayerLuck, _Bonus)
AND
IntegertoString(_PlayerLuck, _LuckStr)
AND
IntegertoString(_TargetLuck, _TargetLuckStr)
AND
IntegertoString(_Bonus, _BonusLuckStr)
AND
StringConcatenate("Base: ", _LuckStr, _Out1)
AND
StringConcatenate(" Target: ", _TargetLuckStr, _Out2)
AND
StringConcatenate(" Bonus: ", _BonusLuckStr, _Out3)
AND
StringConcatenate(_Out1, _Out2, _PreFinalMessage1)
AND
StringConcatenate(_PreFinalMessage1, _Out3, _FinalMessage)
THEN
DisplayText(S_Player_Beast_f25ca124-a4d2-427b-af62-df66df41a978, _FinalMessage);
DebugText(S_Player_Beast_f25ca124-a4d2-427b-af62-df66df41a978, _FinalMessage);
//CharacterAddAbility(S_Player_Beast_f25ca124-a4d2-427b-af62-df66df41a978, "Luck", _Bonus);
*/

/*
IF
CharacterStatusApplied((CHARACTERGUID)_Player, "CA_LUCKY", (CHARACTERGUID)_AuraHost)
AND
DB_IsPlayer(_Player)
THEN
CharacterStatusText(_Player, "Player");

IF
CharacterStatusRemoved((CHARACTERGUID)_Player, "CA_LUCKY", (CHARACTERGUID)_AuraHost)
AND
NOT DB_IsPlayer(_Player)
THEN
CharacterStatusText(_Player, "Not Player");

IF
CharacterStatusApplied((CHARACTERGUID)_Player, "CA_LUCKY", (CHARACTERGUID)_AuraHost)
AND
GetUUID(_Player, _Name)
AND
StringConcatenate("Player: ", _Name, _Message)
THEN
DB_NOOP(1);
//DisplayText(_Player, _Message);
*/
//END_REGION

//REGION PROCS
PROC
CA_ClearLuckActive((CHARACTERGUID)_Player)
AND
DB_CA_LuckAuraActive(_Player, _Val)
THEN
NOT DB_CA_LuckAuraActive(_Player, _Val);

PROC
CA_ClearLuckBonus((CHARACTERGUID)_Player)
AND
DB_CA_LuckBonus(_Player, _Val)
THEN
NOT DB_CA_LuckBonus(_Player, _Val);

PROC
CA_LuckyAuraEffect((CHARACTERGUID)_Player)
AND
GetPosition(_Player, _X, _PY, _Z)
AND
RealSum(_PY, 1.0, _Y)
THEN
PlayEffectAtPosition("CA_FX_LuckyAura_Impact_01", _X, _Y, _Z);
PlaySound(_Player, "Skill_Summon_Cast_AoE_Divine_Aurora");

PROC
CA_LuckyEffect((CHARACTERGUID)_Player)
AND
GetPosition(_Player, _X, _PY, _Z)
AND
RealSum(_PY, 1.0, _Y)
THEN
PlayEffectAtPosition("CA_FX_Lucky_Impact_01", _X, _Y, _Z);
PlaySound(_Player, "Proj_Arrow_Charming_Projectile");

QRY
CA_SetLuckBonus((CHARACTERGUID)_Player, (INTEGER)_PlayerLuck, (INTEGER)_TargetLuck)
AND
_PlayerLuck <= 0
THEN
CA_ClearLuckBonus(_Player);
DB_CA_LuckBonus(_Player, _TargetLuck);

QRY
CA_SetLuckBonus((CHARACTERGUID)_Player, (INTEGER)_PlayerLuck, (INTEGER)_TargetLuck)
AND
_PlayerLuck > 0
AND
IntegerSubtract(_TargetLuck, _PlayerLuck, _Bonus)
THEN
CA_ClearLuckBonus(_Player);
DB_CA_LuckBonus(_Player, _Bonus);

/*
PROC
CA_ClearHostLuckRecord((CHARACTERGUID)_Player)
AND
DB_CA_AuraHostLuck(_Player, _Luck)
THEN
NOT DB_CA_AuraHostLuck(_Player, _Luck);

PROC
CA_RecordHostLuck((CHARACTERGUID)_Player)
AND
CharacterGetAbility(_Player, "Luck", _Luck)
THEN
CA_ClearHostLuckRecord(_Player);
DB_CA_AuraHostLuck(_Player, _Luck);

PROC
CA_ClearLuckRefreshTimers()
AND
DB_CA_LuckRefreshTimer(_Player, _TimerName)
THEN
TimerCancel(_TimerName);
NOT DB_CA_LuckRefreshTimer(_Player, _TimerName);

PROC
CA_ClearLuckRefreshTimers()
AND
DB_CA_LuckRefreshCompleteTimer(_Player, _TimerName)
THEN
TimerCancel(_TimerName);
NOT DB_CA_LuckRefreshCompleteTimer(_Player, _TimerName);
*/

PROC
CA_ApplyLuckAura((CHARACTERGUID)_Player)
AND
CharacterIsInCombat(_Player, 0)
THEN
ApplyStatus(_Player, "CA_LUCKY_AURA", -1.0, 1);
CA_LuckyAuraEffect(_Player);
CA_ClearLuckActive(_Player);
DB_CA_LuckAuraActive(_Player, 1);
CA_Aura_StoreCurrentAbilityValue(_Player, "Luck");

PROC
CA_Luck_TurnAuraOff((CHARACTERGUID)_Player)
AND
HasActiveStatus(_Player, "CA_LUCKY_AURA", 1)
THEN
RemoveStatus(_Player, "CA_LUCKY_AURA");
CharacterStatusText(_Player, "Aura Disabled");
CA_ClearLuckActive(_Player);

//END_REGION

//REGION SKILL_USE
IF
CharacterUsedSkill((CHARACTERGUID)_Player, "Shout_CA_LuckyToggle", _)
AND
HasAppliedStatus(_Player, "CA_LUCKY_AURA", 0)
THEN
CA_ApplyLuckAura(_Player);

IF
CharacterUsedSkill((CHARACTERGUID)_Player, "Shout_CA_LuckyToggle", _)
AND
HasActiveStatus(_Player, "CA_LUCKY_AURA", 1)
THEN
RemoveStatus(_Player, "CA_LUCKY_AURA");
CharacterStatusText(_Player, "Lucky Aura Disabled");
CA_ClearLuckActive(_Player);

//END_REGION

//REGION HOST_AURA_REFRESH
/*
PROC
CA_LuckAura_RefreshRunning((CHARACTERGUID)_Player)
AND
CharacterIsInCombat(_Player, 0)
AND
DB_CA_LuckRefreshTimer(_Player, _TimerName)
AND
DB_CA_AuraHostLuck(_Player, _HostLuck)
AND
CharacterGetAbility(_Player, "Luck", _Luck)
AND
_Luck != _HostLuck
THEN
NOT DB_CA_AuraHostLuck(_Player, _HostLuck);
DB_CA_AuraHostLuck(_Player, _Luck);
TimerCancel(_TimerName);
TimerLaunch(_TimerName, 5000);

PROC
CA_LuckAura_PrepareRefresh((CHARACTERGUID)_Player)
AND
DB_CA_AuraHostLuck(_Player, _HostLuck)
AND
CharacterIsInCombat(_Player, 0)
AND
CharacterGetAbility(_Player, "Luck", _Luck)
AND
_Luck != _HostLuck
AND
CharacterGetDisplayName(_Player,_Handle,_Name)
AND
StringConcatenate("CA_Timer_Luck_HostRefresh_", _Name, _TimerName)
AND
NOT DB_CA_LuckRefreshTimer(_Player, _TimerName)
THEN
NOT DB_CA_AuraHostLuck(_Player, _HostLuck);
DB_CA_AuraHostLuck(_Player, _Luck);
TimerLaunch(_TimerName, 5000);
DB_CA_LuckRefreshTimer(_Player, _TimerName);
CharacterStatusText(_Player, "Refreshing Lucky Aura...");

IF
ItemEquipped(_Item, _Player)
AND
DB_IsPlayer(_Player)
THEN
CA_LuckAura_RefreshRunning(_Player);
CA_LuckAura_PrepareRefresh(_Player);


IF
ItemUnEquipped(_Item, _Player)
AND
DB_IsPlayer(_Player)
THEN
CA_LuckAura_RefreshRunning(_Player);
CA_LuckAura_PrepareRefresh(_Player);

IF
TimerFinished(_TimerName)
AND
DB_CA_LuckRefreshTimer(_Player, _TimerName)
AND
StringConcatenate(_TimerName, "_Complete", _NewTimerName)
AND
NOT DB_CA_LuckRefreshCompleteTimer(_Player, _NewTimerName)
THEN
RemoveStatus(_Player, "CA_LUCKY_AURA");
TimerCancel(_TimerName);
TimerLaunch(_NewTimerName, 500);
NOT DB_CA_LuckRefreshTimer(_Player, _TimerName);
DB_CA_LuckRefreshCompleteTimer(_Player, _NewTimerName);

IF
TimerFinished(_TimerName)
AND
DB_CA_LuckRefreshCompleteTimer(_Player, _TimerName)
THEN
CA_ApplyLuckAura(_Player);
TimerCancel(_TimerName);
NOT DB_CA_LuckRefreshCompleteTimer(_Player, _TimerName);
CharacterStatusText(_Player, "Lucky Aura Refreshed");
*/
//END_REGION

//REGION AUTO-TOGGLE
IF
ObjectEnteredCombat((CHARACTERGUID)_Player, _)
AND
HasActiveStatus(_Player, "CA_LUCKY_AURA", 1)
THEN
CA_ClearLuckActive(_Player);
DB_CA_LuckAuraActive(_Player, 1);
RemoveStatus(_Player, "CA_LUCKY_AURA");

IF
ObjectLeftCombat((CHARACTERGUID)_Player, _)
AND
DB_CA_LuckAuraActive(_Player, 1)
AND
HasActiveStatus(_Player, "CA_LUCKY_AURA", 0)
THEN
CA_ApplyLuckAura(_Player);

IF
SavegameLoaded(_,_,_,_)
AND
DB_IsPlayer(_Player)
AND
DB_CA_LuckAuraActive(_Player, 1)
THEN
CA_ApplyLuckAura(_Player);
//END_REGION

//REGION PARTY_BONUSES

IF
CharacterStatusApplied((CHARACTERGUID)_Player, "CA_LUCKY", (CHARACTERGUID)_AuraHost)
AND
DB_IsPlayer(_Player)
THEN
CA_Aura_ApplyAuraBonus(_AuraHost, _Player, "Luck", "CA_LUCKY");
CA_LuckyEffect(_Player);

IF
CharacterStatusRemoved((CHARACTERGUID)_Player, "CA_LUCKY", (CHARACTERGUID)_AuraHost)
AND
DB_IsPlayer(_Player)
THEN
CA_Aura_RemoveAuraBonus(_Player, "Luck", "CA_LUCKY");
//END_REGION

//REGION LEGACY_REMOVAL
PROC
CA_Legacy_RemoveOldAuras((CHARACTERGUID)_Player)
AND
DB_CA_LuckBonus(_Player, _Val)
THEN
CA_Legacy_RemoveOldBonus(_Player, "Luck", _Val);
NOT DB_CA_LuckBonus(_Player, _Val);

PROC
CA_Legacy_RemoveOldAuras((CHARACTERGUID)_Player)
AND
DB_CA_LuckAuraActive(_Player, _Val)
THEN
CA_Luck_TurnAuraOff(_Player);

//END_REGION

//REGION DATABASE_REFRESH
PROC
CA_System_UpdateAll()
THEN
DB_NOOP(1);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "ZZZ_CivilAuras"
